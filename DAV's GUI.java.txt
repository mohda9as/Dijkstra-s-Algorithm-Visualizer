import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class ShortestPathGUI extends JFrame {
    private static final int NODE_RADIUS = 20;
    private static final int PANEL_WIDTH = 800;
    private static final int PANEL_HEIGHT = 600;

    private enum Mode { ADD_NODE, ADD_EDGE, SELECT_START }
    private Mode currentMode = Mode.ADD_NODE;

    private List<Node> nodes = new ArrayList<>();
    private List<Edge> edges = new ArrayList<>();
    private Node selectedStartNode;
    private Node edgeSourceNode;
    private Stack<HistoryEntry> history = new Stack<>();
    private List<IterationData> iterationDataList = new ArrayList<>();

    private JPanel controlPanel;
    private DrawingPanel drawingPanel;

    private enum EntryType { NODE, EDGE }
    private static class HistoryEntry {
        EntryType type;
        Object data;
        HistoryEntry(EntryType type, Object data) {
            this.type = type;
            this.data = data;
        }
    }

    public ShortestPathGUI() {
        setTitle("Shortest Path Algorithm");
        setSize(PANEL_WIDTH, PANEL_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        controlPanel = new JPanel();
        JButton addNodeButton = new JButton("Add Node");
        JButton addEdgeButton = new JButton("Add Edge");
        JButton selectStartButton = new JButton("Select Start");
        JButton undoButton = new JButton("Undo");

        addNodeButton.addActionListener(e -> currentMode = Mode.ADD_NODE);
        addEdgeButton.addActionListener(e -> currentMode = Mode.ADD_EDGE);
        selectStartButton.addActionListener(e -> currentMode = Mode.SELECT_START);
        undoButton.addActionListener(e -> undoLastAction());

        controlPanel.add(addNodeButton);
        controlPanel.add(addEdgeButton);
        controlPanel.add(selectStartButton);
        controlPanel.add(undoButton);
        add(controlPanel, BorderLayout.NORTH);

        drawingPanel = new DrawingPanel();
        add(drawingPanel, BorderLayout.CENTER);

        setVisible(true);
    }

    private void undoLastAction() {
        if (!history.isEmpty()) {
            HistoryEntry entry = history.pop();
            switch (entry.type) {
                case NODE:
                    Node node = (Node) entry.data;
                    nodes.remove(node);
                    edges.removeIf(e -> e.source == node || e.destination == node);
                    break;
                case EDGE:
                    Edge edge = (Edge) entry.data;
                    edges.remove(edge);
                    break;
            }
            drawingPanel.repaint();
        }
    }

    private class DrawingPanel extends JPanel {
        private Map<Node, Integer> distances = new HashMap<>();
        private Map<Node, Node> predecessors = new HashMap<>();

        public DrawingPanel() {
            setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));
            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    handleMouseClick(e);

                }
            });
        }

        private void handleMouseClick(MouseEvent e) {
            switch (currentMode) {
                case ADD_NODE:
                    String name = JOptionPane.showInputDialog("Enter node name:");
                    if (name != null && !name.trim().isEmpty()) {
                        Node newNode = new Node(e.getX() - NODE_RADIUS, e.getY() - NODE_RADIUS, name);
                        nodes.add(newNode);
                        history.push(new HistoryEntry(EntryType.NODE, newNode));
                        repaint();
                    }
                    break;
                case ADD_EDGE:
                    Node clickedNode = findNodeAt(e.getX(), e.getY());
                    if (clickedNode != null) {
                        if (edgeSourceNode == null) {
                            edgeSourceNode = clickedNode;
                        } else {
                            String weightStr = JOptionPane.showInputDialog("Enter edge weight:");
                            try {
                                int weight = Integer.parseInt(weightStr);
                                if (weight <= 0) throw new NumberFormatException();
                                Edge newEdge = new Edge(edgeSourceNode, clickedNode, weight);
                                edges.add(newEdge);
                                history.push(new HistoryEntry(EntryType.EDGE, newEdge));
                                edgeSourceNode = null;
                                repaint();
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(null, "Invalid weight! Enter positive integer.");
                            }
                        }
                    }
                    break;
                case SELECT_START:
                    Node node = findNodeAt(e.getX(), e.getY());
                    if (node != null) {
                        selectedStartNode = node;
                        runDijkstra();
                        repaint();
                        showSolutionMatrix();
                    }
                    break;
            }
        }

        private Node findNodeAt(int x, int y) {
            for (Node node : nodes) {
                int centerX = node.x + NODE_RADIUS;
                int centerY = node.y + NODE_RADIUS;
                if (Math.pow(centerX - x, 2) + Math.pow(centerY - y, 2) <= NODE_RADIUS * NODE_RADIUS) {
                    return node;
                }
            }
            return null;
        }

        private void runDijkstra() {
            distances.clear();
            predecessors.clear();
            iterationDataList.clear();

            PriorityQueue<Node> queue = new PriorityQueue<>(Comparator.comparingInt(n -> distances.get(n)));
            Map<Node, Boolean> visited = new HashMap<>();
            List<Node> sSet = new ArrayList<>();

            for (Node node : nodes) {
                distances.put(node, Integer.MAX_VALUE);
                visited.put(node, false);
            }
            distances.put(selectedStartNode, 0);
            queue.add(selectedStartNode);

            int iteration = 0;
            recordIteration(iteration++, Collections.emptyList(), null);

            while (!queue.isEmpty()) {
                Node current = queue.poll();
                if (visited.get(current)) continue;

                visited.put(current, true);
                sSet.add(current);

                for (Edge edge : edges) {
                    if (edge.source == current) {
                        Node neighbor = edge.destination;
                        int alt = distances.get(current) + edge.weight;
                        if (alt < distances.get(neighbor)) {
                            distances.put(neighbor, alt);
                            predecessors.put(neighbor, current);
                            queue.add(neighbor);
                        }
                    }
                }

                recordIteration(iteration++, sSet, current);
            }
        }

        private void recordIteration(int iteration, List<Node> sSet, Node selected) {
            IterationData data = new IterationData();
            data.iteration = iteration;
            data.sSet = new ArrayList<>(sSet);
            data.selectedNode = selected;
            data.distances = new HashMap<>(distances);
            iterationDataList.add(data);
        }

        private void showSolutionMatrix() {
            JDialog dialog = new JDialog();
            dialog.setTitle("Solution Matrix");
            String[] columns = {"Node", "Distance", "Path"};
            Object[][] data = new Object[nodes.size()][3];
            for (int i = 0; i < nodes.size(); i++) {
                Node node = nodes.get(i);
                data[i][0] = node.name;
                data[i][1] = distances.get(node) == Integer.MAX_VALUE ? "∞" : distances.get(node);
                data[i][2] = getPath(node);
            }
            JTable table = new JTable(data, columns);
            dialog.add(new JScrollPane(table));
            dialog.pack();
            dialog.setVisible(true);
            showIterationTable();
        }

        private void showIterationTable() {
            JDialog dialog = new JDialog();
            dialog.setTitle("Iteration Table");
            dialog.setLayout(new BorderLayout());

            List<String> columns = new ArrayList<>(Arrays.asList("Iteration", "S", "Vertex Selected"));
            List<Node> sortedNodes = nodes.stream()
                    .sorted(Comparator.comparing(n -> n.name))
                    .collect(Collectors.toList());

            for (Node n : sortedNodes) columns.add(n.name);

            DefaultTableModel model = new DefaultTableModel(columns.toArray(), 0);
            JTable table = new JTable(model);

            for (IterationData data : iterationDataList) {
                Object[] row = new Object[columns.size()];
                row[0] = data.iteration == 0 ? "Initial" : data.iteration;
                row[1] = getSsetString(data.sSet);
                row[2] = data.selectedNode == null ? "--" : data.selectedNode.name;

                int colIndex = 3;
                for (Node n : sortedNodes) {
                    Integer dist = data.distances.get(n);
                    row[colIndex++] = dist == Integer.MAX_VALUE ? "∞" : dist;
                }
                model.addRow(row);
            }

            dialog.add(new JScrollPane(table), BorderLayout.CENTER);
            dialog.pack();
            dialog.setVisible(true);
        }

        private String getSsetString(List<Node> sSet) {
            return sSet.stream()
                    .map(n -> n.name)
                    .sorted()
                    .collect(Collectors.joining(",", "{", "}"));
        }

        private String getPath(Node node) {
            LinkedList<Node> path = new LinkedList<>();
            Node current = node;
            while (current != null) {
                path.addFirst(current);
                current = predecessors.get(current);
            }
            if (path.isEmpty() || path.getFirst() != selectedStartNode) return "No path";
            return path.stream()
                    .map(n -> n.name)
                    .collect(Collectors.joining(" → "));
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            // Draw edges
            for (Edge edge : edges) {
                Node src = edge.source;
                Node dest = edge.destination;
                Point start = new Point(src.x + NODE_RADIUS, src.y + NODE_RADIUS);
                Point end = new Point(dest.x + NODE_RADIUS, dest.y + NODE_RADIUS);

                double angle = Math.atan2(end.y - start.y, end.x - start.x);
                Point adjStart = new Point(
                        (int) (start.x + NODE_RADIUS * Math.cos(angle)),
                        (int) (start.y + NODE_RADIUS * Math.sin(angle))
                );
                Point adjEnd = new Point(
                        (int) (end.x - NODE_RADIUS * Math.cos(angle)),
                        (int) (end.y - NODE_RADIUS * Math.sin(angle))
                );

                boolean isPath = predecessors.get(dest) == src && distances.get(dest) != Integer.MAX_VALUE;
                g2.setColor(isPath ? Color.RED : Color.BLACK);
                g2.setStroke(new BasicStroke(2));
                g2.drawLine(adjStart.x, adjStart.y, adjEnd.x, adjEnd.y);

                // Draw arrow
                Polygon arrow = new Polygon();
                int arrowSize = 15;
                arrow.addPoint(adjEnd.x, adjEnd.y);
                arrow.addPoint(
                        (int) (adjEnd.x - arrowSize * Math.cos(angle - Math.PI/6)),
                        (int) (adjEnd.y - arrowSize * Math.sin(angle - Math.PI/6))
                );
                arrow.addPoint(
                        (int) (adjEnd.x - arrowSize * Math.cos(angle + Math.PI/6)),
                        (int) (adjEnd.y - arrowSize * Math.sin(angle + Math.PI/6))
                );
                g2.fill(arrow);

                // Draw weight
                g2.setColor(Color.BLUE);
                Point txtPos = new Point(
                        (adjStart.x + adjEnd.x)/2 + (int)(15 * Math.cos(angle + Math.PI/2)),
                        (adjStart.y + adjEnd.y)/2 + (int)(15 * Math.sin(angle + Math.PI/2))
                );
                g2.drawString(String.valueOf(edge.weight), txtPos.x, txtPos.y);
            }

            // Draw nodes
            for (Node node : nodes) {
                g2.setColor(node == selectedStartNode ? Color.GREEN : Color.WHITE);
                g2.fillOval(node.x, node.y, NODE_RADIUS*2, NODE_RADIUS*2);
                g2.setColor(Color.BLACK);
                g2.drawOval(node.x, node.y, NODE_RADIUS*2, NODE_RADIUS*2);
                g2.drawString(node.name, node.x + NODE_RADIUS - 5, node.y + NODE_RADIUS + 5);
            }

            // Draw edge source highlight
            if (currentMode == Mode.ADD_EDGE && edgeSourceNode != null) {
                g2.setColor(Color.ORANGE);
                g2.fillOval(edgeSourceNode.x, edgeSourceNode.y, NODE_RADIUS*2, NODE_RADIUS*2);
            }
        }
    }

    private static class Node {
        int x, y;
        String name;
        Node(int x, int y, String name) {
            this.x = x;
            this.y = y;
            this.name = name;
        }
    }

    private static class Edge {
        Node source, destination;
        int weight;
        Edge(Node source, Node destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    private static class IterationData {
        int iteration;
        List<Node> sSet;
        Node selectedNode;
        Map<Node, Integer> distances;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ShortestPathGUI::new);
    }
}